from fpdf import FPDF
from fpdf.enums import XPos, YPos
import re
from typing import List
from datetime import datetime

class PDFReportGenerator:
    def __init__(self):
        self.pdf = FPDF()
        self._setup_fonts()
        self._setup_document()
        
    def _setup_fonts(self):
        """Configure fonts for the document"""
        self.pdf.add_font('DejaVu', '', 'DejaVuSans.ttf', uni=True)
        self.pdf.add_font('DejaVu', 'B', 'DejaVuSans-Bold.ttf', uni=True)
        self.pdf.add_font('DejaVu', 'I', 'DejaVuSans-Oblique.ttf', uni=True)
        self.pdf.set_font('DejaVu', '', 12)
    
    def _setup_document(self):
        """Set up basic document properties"""
        self.pdf.set_auto_page_break(auto=True, margin=25)
        self.pdf.set_margins(left=25, top=25, right=25)
        self.pdf.set_title("Research Report")
        self.pdf.add_page()
    
    def generate_from_markdown(self, md_content: str, output_path: str):
        """Convert markdown content to a properly formatted PDF"""
        # Process the markdown content
        lines = md_content.split('\n')
        self._add_title_page()
        
        # Main content processing
        for line in lines:
            if not line.strip():
                self.pdf.ln(5)
                continue
                
            if line.startswith('# '):
                self._add_heading(line[2:], level=1)
            elif line.startswith('## '):
                self._add_heading(line[3:], level=2)
            elif line.startswith('### '):
                self._add_heading(line[4:], level=3)
            elif line.startswith('- **') and '**:' in line:  # Bold key-value pairs
                self._add_key_value(line)
            elif line.startswith('- '):
                self._add_bullet_point(line[2:])
            else:
                self._add_paragraph(line)
        
        # Add footer and output
        self._add_footer()
        self.pdf.output(output_path)
    
    def _add_title_page(self):
        """Add a professional title page"""
        self.pdf.set_font('DejaVu', 'B', 24)
        self.pdf.cell(0, 40, "Research Report", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        self.pdf.set_font('DejaVu', '', 14)
        self.pdf.cell(0, 10, "Generated by Advanced Research Assistant", new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        self.pdf.ln(30)
        self.pdf.set_font('DejaVu', 'I', 10)
        self.pdf.cell(0, 10, f"Generated on: {datetime.now().strftime('%B %d, %Y at %H:%M')}", 
                      new_x=XPos.LMARGIN, new_y=YPos.NEXT, align='C')
        self.pdf.add_page()
    
    def _add_heading(self, text: str, level: int):
        """Add a heading with appropriate formatting"""
        if level == 1:
            self.pdf.set_font('DejaVu', 'B', 16)
            self.pdf.ln(10)
            self.pdf.cell(0, 10, text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            self.pdf.ln(5)
            # Add a line under h1
            self.pdf.line(self.pdf.l_margin, self.pdf.get_y(), 
                         self.pdf.w - self.pdf.r_margin, self.pdf.get_y())
            self.pdf.ln(5)
        elif level == 2:
            self.pdf.set_font('DejaVu', 'B', 14)
            self.pdf.ln(8)
            self.pdf.cell(0, 8, text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            self.pdf.ln(4)
        else:  # level 3
            self.pdf.set_font('DejaVu', 'B', 12)
            self.pdf.ln(6)
            self.pdf.cell(0, 6, text, new_x=XPos.LMARGIN, new_y=YPos.NEXT)
            self.pdf.ln(3)
    
    def _add_paragraph(self, text: str):
        """Add regular paragraph text"""
        self.pdf.set_font('DejaVu', '', 12)
        self.pdf.multi_cell(0, 6, text)
        self.pdf.ln(4)
    
    def _add_bullet_point(self, text: str):
        """Add a bullet point item"""
        self.pdf.set_font('DejaVu', '', 12)
        self.pdf.cell(10)  # Indent
        self.pdf.multi_cell(0, 6, "â€¢ " + text)
        self.pdf.ln(2)
    
    def _add_key_value(self, text: str):
        """Add formatted key: value pair"""
        # Extract key and value
        match = re.match(r'- \*\*(.*?)\*\*: (.*)', text)
        if match:
            key, value = match.groups()
            self.pdf.set_font('DejaVu', 'B', 12)
            self.pdf.cell(15)  # Indent
            self.pdf.cell(40, 6, f"{key}:", new_x=XPos.RIGHT)
            self.pdf.set_font('DejaVu', '', 12)
            self.pdf.multi_cell(0, 6, value)
            self.pdf.ln(3)
        else:
            self._add_bullet_point(text)  # Fallback
    
    def _add_footer(self):
        """Add footer to each page"""
        self.pdf.set_auto_page_break(auto=False)
        for i in range(1, self.pdf.page_no() + 1):
            self.pdf.set_page(i)
            self.pdf.set_y(-15)
            self.pdf.set_font('DejaVu', 'I', 8)
            self.pdf.cell(0, 10, f"Page {i} of {self.pdf.page_no()}", 
                         new_x=XPos.RIGHT, new_y=YPos.TOP, align='C')
        self.pdf.set_auto_page_break(auto=True)